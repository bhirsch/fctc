<?php 
/**
 * @file fctc.module
 *  Custom module for FCTC-ITP prototype.
 */

/**
 * Implements hook_menu().
 */
function fctc_menu() {
  $items = array();

  $items['fctc/tracking/in-transit'] = array(
    'page callback' => 'fctc_tracking_in_transit',
    'title' => 'Tracking: Shipments in Transit',
    'access arguments' => array('access content'),
    'file' => 'fctc.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'fctc',
  );
  $items['fctc/tracking/aggregate-data'] = array(
    'page callback' => 'fctc_tracking_aggregate_data',
    'title' => 'Tracking: Aggregate Data',
    'access arguments' => array('access content'),
    'file' => 'fctc.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'fctc',
  );
  $items['fctc/tracking/routes'] = array(
    'page callback' => 'fctc_tracking_routes',
    'title' => 'Tracking: Routes',
    'access arguments' => array('access content'),
    'file' => 'fctc.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'fctc',
  );
  // @todo Replace this with Aggregate Data
  $items['fctc/tracking/sent-received'] = array(
    'page callback' => 'fctc_tracking_sent_received_page',
    'title' => 'Tracking: Sent v. Recieved',
    'access arguments' => array('access content'),
    'file' => 'fctc.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'fctc',
  );
  $items['fctc/tracing'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fctc_trace'),
    'title' => 'Tracing',
    'access arguments' => array('access content'),
    'file' => 'fctc.pages.inc',
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'fctc',
  );

  return $items; 
}

/**
 * Implements hook_theme().
 */
function fctc_theme() {
  return array(
    'fctc_tracking_in_transit' => array(
      'render element' => 'tracking data',
      'file' => 'fctc.pages.inc',
    ),  
    'fctc_tracking_sent_received' => array(
      'render element' => 'tracking data',
      'file' => 'fctc.pages.inc',
    ),  
    /*
    'fctc_tracing' => array(
      'render element' => 'tracing data',
      'file' => 'fctc.pages.inc',
    ),  
    // */
  );
}

/**
 * Implements hook_block_info().
 */
function fctc_block_info() {
  $blocks = array();
  $blocks['track form']['info'] = t('Tracking Form');
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function fctc_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'track form':
      $subject = '';
      $content = drupal_get_form('fctc_track');
    break;
  }
  $block['subject'] = $subject;
  $block['content'] = $content;
  
  return $block;
}

/**
 * @return $form
 *  Form array. 
 */
function fctc_track($form, &$form_state) {
  $data = fctc_get_data();

  $form['form header'] = array(
    '#type' => 'item',
    '#title' => t('Track Shipments: Query Builder'),
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
  );    
  // Recipient.
  $form['to'] = array(
    '#type' => 'select',
    '#title' => t('Recipient'),
    '#options' => _fctc_track_options($data, 'to'),
  );
  // Sender.
  $form['from'] = array(
    '#type' => 'select',
    '#title' => t('Sender'),
    '#options' => _fctc_track_options($data, 'from'),
  );
  // To country.
  $form['destination'] = array(
    '#type' => 'select',
    '#title' => t('To Country'),
    '#options' => _fctc_track_options($data, 'destination'),
  );
  // From country.
  $form['origin'] = array(
    '#type' => 'select',
    '#title' => t('From Country'),
    '#options' => _fctc_track_options($data, 'origin'),
  );
  // Final destination.
  $form['final-destination'] = array(
    '#type' => 'select',
    '#title' => t('Final Destination'),
    '#options' => _fctc_track_options($data, 'final-destination'),
  );
  // Shipment description (sent/received).
  $form['description'] = array(
    '#type' => 'select',
    '#title' => t('Shipment Description'),
    '#options' => array(
      '' => t('<none>'),
      'sent' => t('sent'),
      'received' => t('received'),
    ),
  );
  // Shipment status (0 in transit, 1 received at final destination).
  $form['status'] = array(
    '#type' => 'select',
    '#title' => t('Shipment Status'),
    '#options' => array(
      '' => t('<none>'),
      '0' => t('In Transit'),
      '1' => t('Received at Final Destination'),
    ),
  );
  // Date range.
  $form['before-date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Before Date'),
    '#date_type' => DATE_UNIX,
    '#date_format' => 'd/m/Y',
  );
  $form['after-date'] = array(
    '#type' => 'date_popup',
    '#title' => t('After Date'),
    '#date_type' => DATE_UNIX,
    '#date_format' => 'd/m/Y',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Run Query'),
  );

  // If form was rebuilt, display results from last query.
  if ($form_state['rebuild']) {
    $form = _fctc_track_results($form, $form_state['values'], $data);
  }
 
  return $form;
}

/**
 * Submit handler for fctc_track form.
 */
function fctc_track_submit(&$form, &$form_state) {
  $form_state['rebuild'] = TRUE;
}

//-----------------------------------------------------------------/
// Helper functions for processing data.                           /
//                                                                 /
// Note: These really only work for prototyping. These functions   /
// were easy and fast to write. But they won't scale.              /
//-----------------------------------------------------------------/
/**
 * Get all cached RDF data and store it in one big array.
 * Use this for processing data for track and trace examples.
 *
 * Make these values: 
 *   s, subject, e.g. http://localhost/countryx/node/20
 *   p, predicate, e.g. http://this.doesnt.really.get.checked.com/id
 *   o, object, e.g. 12345
 * Look like this:  
 *   $data['subject']['predicate'] = 'object';
 * 
 * @todo This is an RDF/SPARQL hack but it will make prototyping a lot faster
 * without getting bogged down in SPARQL syntax.
 * 
 * @return $data
 *  Array of sanitized shipment data in the following format:  
 *  $data['subject']['predicate'] = 'object';
 */
function fctc_get_data($short_predicate = TRUE) {
  // Get RDF data from SPARQL endpoint.
  $endpoint = url('sparql', array('absolute' => TRUE));
  $query = 'SELECT * WHERE {
            GRAPH ?g { ?s ?p ?o . }
           }';
  $sparql_results = sparql_request($query, $endpoint);

  // Convert SPARQL results to a friendlier array.
  $data = array();
  foreach ($sparql_results['result']['rows'] as $row) {
    // Sanitize data. 
    $subject = check_plain($row['s']);
    $predicate = check_plain($row['p']);
    $object = check_plain($row['o']);
    // Shorten predicate from this: http://this.doesnt.really.get.checked.com/id
    // to this: id.
    if ($short_predicate) {
      $position = strripos($predicate, '/') + 1;
      $predicate = substr($predicate, $position);
    }
    $data[$subject][$predicate] = $object;
  }

  return $data;
}

/**
 * @param $params
 *  Array. Parameters submitted via $form_state['values'] from a submitted 
 *  fctc_tracking form.
 * 
 * @param $count
 *  Integer. Number of records matching query criteria.
 */
function fctc_count_results($params, $data) {
  $count = 0;
  //dsm($params, 'params');
  //dsm($data, 'data');

  // Test query criteria against each shipment record. 
  foreach ($data as $shipment) {
    // All values must match.
    foreach ($params as $param => $value) {
      if (isset($shipment[$param]) && $shipment[$param] == $value) {
        $match = TRUE;
      }
      // Handle cases where $shipment[$param] will not equal $value,
      // specifically: before date, after date, status.
      else if ($param == 'before-date' && $shipment['date'] < fctc_datestamp($value)) {
        $match = TRUE;
      }
      else if ($param == 'after-date' && $shipment['date'] > fctc_datestamp($value)) {
        $match = TRUE;
      }
      else if ($param == 'status' && ((!$shipment['status'] && !$value) || ($shipment['status'] && $value)) ) {
        $match = TRUE;
      }
      else {
        $match = FALSE; 
        break;
      }
    }
    if ($match) {
      // Increment count for each match.
      //dsm($shipment, 'shipment match');
      $count++;  
    }
  }

  return $count;
}

/**
 * @param $date
 *   String. yyyy-mm-dd.
 * 
 * @return
 *  Unix timestamp.
 */
function fctc_datestamp($date) {
  $parts = explode('-', $date);
  $yyyy = $parts[0];
  $mm = $parts[1];
  $dd = $parts[2];
  $datestamp = mktime(0, 0, 0, $mm, $dd, $yyyy);
 
  return $datestamp;
}

//------------------------------------------------------------------/
// Internal functions                                               /
//------------------------------------------------------------------/
/**
 * @param $data
 *  Array. Results of fctc_get_data().
 * 
 * @param $delta
 *  String. Which form element / RDF predicate we're generating options for.
 * 
 * @return
 *  Array. Select options. Recipients.
 */
function _fctc_track_options($data, $delta) {
  $options = array('' => t('<none>'));
  foreach ($data as $shipment) {
    if (isset($shipment[$delta])) {
      if (!empty($shipment[$delta]) && !in_array($shipment[$delta], $options)) {
        $value = check_plain($shipment[$delta]);
        $options[$value] = $value;
      }
    }
  }
  
  return $options;  
}

/**
 * To make fctc_track form re-usable as a block, use this function 
 * to check the path and return different results, depending on which
 * page the form is being used on.
 * 
 * Results are displayed along with rebuilt forms as form items.
 * 
 * @param $form
 *  Form array.
 * 
 * @param $values
 *  $values, $form_state['values'] from last form submission.
 * 
 * @param $data
 *  Array. @see fctc_get_data().
 * 
 * @return $form
 *  Form array.
 */
function _fctc_track_results($form, $values, $data) {
  // Display submitted query criteria above results as form items.
  $form['results header'] = array(
    '#type' => 'item',
    '#title' => t('Track Shipments: Query Results'),
    '#prefix' => '<h1>',
    '#suffix' => '</h1>',
    '#weight' => -2,
  );
  $form['results'] = array(
    '#type' => 'fieldset',
    '#weight' => -1,
  );
  foreach ($values as $key => $value) {
    $parameters = array();
    // Only show values with titles, that is, form elements used as 
    // query parameters.
    if (isset($form[$key]['#title']) && $value != NULL) {
      // Hang onto these $params. This makes finding results easier later.
      $params[$key] = $value;
      // Get values for form item.
      $title = $form[$key]['#title'];
      $name = "item-$key";
      // Shipment Status values are boolean. The rest are human readable strings.
      if ($title == 'Shipment Status') {
        $value = $form[$key]['#options'][$value];
      }
      $title = $form[$key]['#title'] . ': ' . $value;
      // Add form item.
      $form['results'][$name] = array(
        '#type' => 'item',
        '#title' => $title,
      );    
    }
  }

  // Display different results based on path.
  switch (arg(2)) {
    // Path: fctc/tracking/aggregate-data
    case 'aggregate-data': 
      $count = fctc_count_results($params, $data);
      $form['results']['results'] = array(
        '#type' => 'item',
        '#title' => t('%count shipments match the criteria above.', 
                    array('%count' => $count)),
        '#prefix' => '<h2>',
        '#suffix' => '</h2>',
      );    
    break;
  }

  return $form;
}

